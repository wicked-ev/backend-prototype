// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id        Int      @id @default(autoincrement())
  email String @unique
  createdAt DateTime @default(now())
  firstName String
  lastName  String
  BloodType String
  hash String
  Devices Device[]
  Account accounts?
  @@map("Users")
} 

model Device {
  Sid        Int @id @default(autoincrement())
  activateCode Int @unique
  createdAt DateTime @default(now())
  ownerID Int?
  owner Users? @relation(fields: [ownerID], references: [id])
  userlist UserListRecords?
  @@map("Devices")
}

model accounts {
  AccId Int @id @default(autoincrement())
  AccountOwner Int @unique
  accountowner Users @relation(fields: [AccountOwner], references: [id])
  userRecord UserListRecords[] 
  PreviewRequest PreviewerList[] @relation("Pre")
  sentPreviewRequest PreviewerList[] @relation("PreReq")
}
model PreviewerList {
  id Int @id @default(autoincrement())
  PreviewedAccountId Int
  previewed accounts @relation(name:"Pre",fields: [PreviewedAccountId], references: [AccId])
  PreviewerAccountId Int
  previewer accounts @relation(name:"PreReq",fields: [PreviewerAccountId], references: [AccId])
  state String
}

model Heart_Rate_Record {
  Rid      Int @id @default(autoincrement())
  ULRid     Int @unique
  ulrid UserListRecords @relation(fields: [ULRid], references: [ULRid])
  beat      Float
  redReading   Float
  ir_Reading   Float
  timeStamp DateTime @db.Timestamptz(3)
}

model UserListRecords {
  ULRid Int @id @default(autoincrement())
  AutherDeviceid Int @unique //each Record is unique based on the auther
  device Device @relation(fields: [AutherDeviceid], references: [Sid])
  User Int //not unique user can have mulitple records with diffrenet autherDevices
  user accounts @relation(fields: [User], references: [AccountOwner])
  HR_Record Heart_Rate_Record[]
}